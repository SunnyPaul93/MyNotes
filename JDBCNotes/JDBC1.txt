Type 4-Driver: it can communicate directly with the data base by using databases native protocol provided by database vendor it converts jdbc calls into databse 
specific call directly this driver is also known as pure java driver as developed in java only this driver is know as native protocol driver and also known as thin 
driver as type 4  








 DriverManager.getConnection ( ) : This method return you a connection class object. This try to built a connection between Url and database.

 con.createStatement ( ) : This is used to return you Sql object. A connection object is used to send and execute sql query in the backend database.

 st.executeUpdate ( ) :  This method return you an integer value, this specify the number of rows to be affected in the table .



mysql> create table student1(sid int primary key,sname varchar(20),email varchar(20),phone bigint);
Query OK, 0 rows affected (0.14 sec)

SQL> create table student1(sid int primary key,sname varchar(20),email varchar(20),phone bigint);
Table Created


/*Programme to insert data into database*/

package jdbc1;
import java.sql.*;
public class JDBC_Lab1 {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub
		Connection con=null;
		Statement st=null;
		//We will use Type IV driver as it has high performance it can communicate directly with the data base by using databases native protocol provided by database vendor it converts jdbc calls into databse specific call directly this driver is also known as pure java
	
		
		try {
			Class.forName("com.mysql.jdbc.Driver");				//driver class for mysql is loaded
			
			//Estlablishing the connection
			con=DriverManager.getConnection("jdbc:mysql://localhost:3306/sunny","root", "root");
			
			//Prepare sql statement
			String mysql="insert into student1 values(101,'Sunny','sunny@gmail.com',8759167520)";
	
			//Create JDBC connection
			st=con.createStatement();
			
			//submit sql statement to database using JDBC statement
			int x=st.executeUpdate(mysql);
			
			//process the result
			if(x==1){
				System.out.println("Record Inserted");
					
			}
		
			else 
				System.out.println("No Record Inserted");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		
		finally{
				try {
					if(st!=null)
					st.close();
		
					if(con!=null)
						con.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
	}

}

Note:	If we donot use finally block to close the connection than if error occur in loading the driver than resources(con,st) will not get close
	If we donot use if condition i.e (if(st!null),if(con!null)) than if exception occur for suppose estlablishing connection than contol will go to catch block an if 
	we want to close st and con than null pointer exception will occur as at 1st only we set these two to null


Run above java programme

String mysql="insert into student1 values(101,'Sunny','sunny@gmail.com',8759167520)";

mysql> select * from student1;
+-----+-------+-----------------+------------+
| sid | sname | email           | phone      |
+-----+-------+-----------------+------------+
| 101 | Sunny | sunny@gmail.com | 8759167520 |
+-----+-------+-----------------+------------+
1 row in set (0.05 sec)




Note:In variable mysql change sid,sname,email,phone
	String mysql="insert into student1 values(102,'Raju','raju@gmail.com',7384657575)";
	Run above java programme

	String mysql="insert into student1 values(103,'Mani','mani@gmail.com',8384747456)";
	Run above java programme

mysql> select * from student1;
+-----+-------+-----------------+------------+
| sid | sname | email           | phone      |
+-----+-------+-----------------+------------+
| 101 | Sunny | sunny@gmail.com | 8759167520 |
| 102 | Raju  | raju@gmail.com  | 7384657575 |
| 103 | Mani  | mani@gmail.com  | 8384747456 |
+-----+-------+-----------------+------------+
3 rows in set (0.00 sec)

Now if we insert sid which is primary key as 102 than we will get error in java as we get in mysql 		




	String mysql="insert into student1 values(104,'Rani','rani@gmail.com',7364548474)";
	Run above java programme
	


mysql> select * from student1;
+-----+-------+-----------------+------------+
| sid | sname | email           | phone      |
+-----+-------+-----------------+------------+
| 101 | Sunny | sunny@gmail.com | 8759167520 |
| 102 | Raju  | raju@gmail.com  | 7384657575 |
| 103 | Mani  | mani@gmail.com  | 8384747456 |
| 104 | Rani  | rani@gmail.com  | 7364548474 |
+-----+-------+-----------------+------------+
4 rows in set (0.00 sec)






Note:	Though phone in mysql is bigint type but in java phone is of long type that means datatype doesnot matter, here only we are retriving and inserting the 
	data from mysql to java jdbc programme




/*Programme to retrive data into database*/


package jdbc1;
import java.sql.*;

public class JDBC_Lab2 {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try {
			Class.forName("com.mysql.jdbc.Driver");				//driver class for mysql is loaded
			
			//Estlablishing the connection
			con=DriverManager.getConnection("jdbc:mysql://localhost:3306/sunny","root", "root");
			
			//Prepare sql statement
			String mysql="select * from student1";
	
			//Create JDBC connection
			st=con.createStatement();
			rs=st.executeQuery(mysql);
			
			while(rs.next()){
				int sid=rs.getInt(1);			
				String sn=rs.getString(2);
				String em=rs.getString(3);
				long pn=rs.getLong(4);
				
				System.out.println(sid + "\t" +sn + "\t" + em + "\t" + pn);
			}
			
			
		
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		
		finally{
				try {
					if(rs!=null)
					rs.close();
		
					if(st!=null)
					st.close();
					
					if(con!=null)
						con.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		}
	}

}


Note:	If we donot use finally block to close the connection than if error occur in loading the driver than resources(con,st,rs) will not get close

************************************************************************************************************************************

JDBC UTIL:

For suppose we want to migrate from one DB to another DB than every time we need to clloect the class name using the forname("fully qualified class name") 
method and every time we need to insert url,username,password in every JDBC programme, also every time in all JDBC programme we need to close our 
connection so in every JDBC programme we need to write our resource clean up code and this will  create problem 
So to aviod the above problem we can centralize the above code in JDBCUTIL class




mysql> use sunny;
Database changed
mysql>  create table student2(sid int,name varchar(20),email varchar(20),phone bigint);
Query OK, 0 rows affected (0.11 sec)

SQL>  create table student2(sid int,name varchar(20),email varchar(20),phone bigint);
Table Created


package jdbc1;

import java.sql.*;


public class JDBC_UTIL {

	static{		//to avoid multiple check of class loading we use this static block as static block will be loaded once
		try {
		
			Class.forName("com.mysql.jdbc.Driver");

			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}	
		public static Connection myOracleConnection() throws SQLException{
			String url1="jdbc:oracle:thin:@localhost:1521:XE";
			Connection con=DriverManager.getConnection(url1,"system","system");
			return con;
		}
		public static Connection getMySQLConnection() throws SQLException{
			String url2="jdbc:mysql://localhost:3306/sunny";
			Connection con=DriverManager.getConnection(url2,"root","root");
			return con;
		}
		
		public static void mycleanup1(Statement st,Connection con){
			try {
				if(st!=null)
					st.close();
				if(con !=null)
					con.close();
				
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
	
		}
			public static void mycleanup2(ResultSet rs,Statement st,Connection con){
				try {
					if(st!=null)
						st.close();
					if(con !=null)
						con.close();
					if(rs!=null)
						rs.close();
					
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
				
				
		
		}
		
		
	}
	
	
//here function name cleanup is same but Parameter counts are differENT





/*Programme to insert data into database*/

package jdbc1;

import java.sql.*;
import jdbc1.JDBC_UTIL;
public class JDBC_Lab3 {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub
		Connection con=null;
		Statement st=null;
		//We will use Type IV driver as it has high performance it can communicate directly with the data base by using databases native protocol provided by database vendor it converts jdbc calls into databse specific call directly this driver is also known as pure java
	
		
		try {
			
			
			con=JDBC_UTIL.getMySQLConnection();			//TO CONNECT WITH MYSQL	USING TYPE IV DRIVER
		//	con=JDBC_UTIL.myOracleConnection();			//TO CONNECT WITH ORACLE USING TYPE IV DRIVER
			
			//Prepare sql statement
			String mysql="insert into student2 values(103,'Ravi','ravi@gmail.com',8374657686)";
	
			//Create JDBC connection
			st=con.createStatement();
			
			//submit sql statement to database using JDBC statement
			int x=st.executeUpdate(mysql);				//return type of executeUpdate(mysql) is integer(int)		
			
			//process the result
			if(x==1){
				System.out.println("Record Inserted In mysql");
					
			}
		
			else 
				System.out.println("No Record Inserted");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		
		finally{
			JDBC_UTIL.mycleanup1(st, con);
		}
	}

}


IN MYSQL
mysql> select * from student2;
+------+-------+-----------------+------------+
| sid  | name  | email           | phone      |
+------+-------+-----------------+------------+
|  101 | Mohan | mohan@gmail.com | 8393747474 |
|  102 | Pooja | pooja@gmail.com | 9292929283 |
|  103 | Ravi  | ravi@gmail.com  | 8374657686 |
+------+-------+-----------------+------------+
3 rows in set (0.00 sec)







package jdbc1;

import java.sql.*;

public class JDBC_Lab4 {

	public static void main(String[] args) throws SQLException {
		// TODO Auto-generated method stub
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try {
			
			con=JDBC_UTIL.getMySQLConnection();
		//	con=JDBC_UTIL.myOracleConnection();
			
			//Prepare sql statement
			String mysql="select * from student2";
	
			//Create JDBC connection
			st=con.createStatement();
			rs=st.executeQuery(mysql);
			
			while(rs.next()){
				int sid=rs.getInt(1);
				String sn=rs.getString(2);
				String em=rs.getString(3);
				long pn=rs.getLong(4);
				
				System.out.println(sid + "\t" +sn + "\t" + em + "\t" + pn);
			}
			
			
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
		
		finally{
				
					JDBC_UTIL.mycleanup2(rs, st, con);
		
		}
	}

}








SQL> create table student2(sid int,name varchar(20),email varchar(20),phone number);

Table created.

Now connect JDBC programme with Oracle

.................
String mysql="insert into student2 values(103,'Suraj','suraj@gmail.com',8282736456)";
Run JDBC_Lab3	


SQL> select * from student2;

       SID NAME                 EMAIL                     PHONE
---------- -------------------- -------------------- ----------
       101 Mohan                mohan@gmail.com      8374657686
       102 Pooja                pooja@gmail.com      9292838374
       103 Suraj                suraj@gmail.com      8282736456

1st create table in mysql 
Than in JDBC programme write code for connecting with mysql and than insert valuse and write another programme in JDBC to select from created table
Similarly
1st create table in Oracle(SQL) 
Than in JDBC programme write code for connecting with SQL and than insert valuse and write another programme in JDBC to select from created table


***********************************************************************************************************************************

Now Onwards I am using my Prepared JDBC programme to Connect with dfferent databases and resource cleanup code


