Everything in Maven is driven in a declarative fashion using Maven's Project Object Model (POM) and specifically, the plugin configurations contained in the POM.
The execution of Maven's plugins is coordinated by Maven's build life cycle in a declarative fashion with instructions from Maven's POM.
It is the POM that drives execution in Maven and this approach can be described as model-driven or declarative execution.The POM is an XML document

POM contains the following key elements:

	project		:-This is the top-level element in all Maven pom.xml files.


	modelVersion	:-This required element indicates the version of the object model that the POM is using. The version of the model itself changes very 
		        	   infrequently, but it is mandatory in order to ensure stability when Maven introduces new features or other model changes.


	groupId		:-This element indicates the unique identifier of the organization or group that created the project. The groupId is one of the key 
			   identifiers of a project and is typically based on the fully qualified domain name of your organization. 
			   Ex:-	org.apache.maven.plugins is the designated groupId for all Maven plugins.



	artifactId		:-This element indicates the unique base name of the primary artifact being generated by this project. A typical artifact produced by
			   Maven would have the form
				<artifactId>-<version>.<extension> (for example, myapp-1.0.jar). 
			Additional artifacts such as source bundles also use the artifactId as part of their file name.


	packaging		:-This element indicates the package type to be used by this artifact (JAR,WAR, EAR, etc.). This not only means that the artifact 
			   produced is a JAR, WAR, or EAR but also indicates a specific life cycle to use as part of the build process. 
			  The default value for the packaging element is jar so we do not have to specify this in most cases.


	version		:-This element indicates the version of the artifact generated by the project.
			   Maven goes a long way to help us with version management and we will often see the SNAPSHOT designator in a version, 
			   which indicates that a project is in a state of development.


	name		:-This element indicates the display name used for the project. This is often used in Maven's generated documentation, and during 
			   the build process for our project or other projects that use it as a dependency.


	url		:-This element indicates where the project's site can be found.


	description	:-This element provides a basic description of our project.



































































































































































































































































































