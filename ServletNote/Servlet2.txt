Session Management:-
	HTTP protocol and Web Server are stateless i.e. every request is new request to process for web server and they cannot identify whether it is comming 
	from same client or new client 
	Sometime in web application we need to identify the client and process request as per the client

	Session is a period of time where the user sends multiple request and receives multiple responses 
	In multiple requests user may send send some data that should be stored  and managed on the server 	
	So Session is used to store Client Specific data.Session is conversional state between client and server 
	With the User Session we have 2 hings:	
		~Identify the client 
		~Manage the Conversional State(i.e Client Specific Data) 
		
	To identify whether the Client specific data is Old or New Container uses Session ID
	To store Client Specific Data or State we have HttpSession object
	HttpServlet Objects is Private to user to user
	
There is only one servlet context object in one web appication and can be shared by all the servlet running in the appication but HttpSession object is created along 
with session id for every user when using for the first time which goes with cookies in a particular browser and session Id remains until we delete the cookies
	We can use the following method with HttpServletRequest objects to access the HttpSession object

	1.getsession():-Returns the current session associated with this request, or if the request does not have a session, creates one.	
	HttpSesssion sess=request.getSession();


	2.getSession(boolean true):Returns the current HttpSession associated with this request or, if there is no current session and create is true, returns a new session.
	HttpSesssion sess=request.getSession(boolean true);

		1 and 2 are more or less same
		
	3.HttpSession session =request.getSession(false);
	above statement  will  returns the current session if session exists and if there's no valid session, a new session  will not be created,  it  will return null.



	When we call getSession() methods than following things happpen:-
		public HttpSession getSession();
	
	~Checks whether the incoming request contains the Cookie with name JSESSIONID or not
	
	~If the incoming request conatins the Cookies with name JSESSIONID(i.e Session Object Alresdy created ) then following tasks happen:-
		Collect the value of Coockie which is SessionID 
		Picks the Session Object releated to this SessionID
		Returns this existing Session object
	
	~If the incoming request doesnot conatin the Cookie with  name JSESSIONID than following tasks will happen:-
		Create Session object 
		Generates unique session id
		Stores the session id in session objects 
		Creates cookies with name JSESSIONID and with the value Client Session Id
		Add the cookies to response Object 
		Returns this New Session Object 
	



	SESSION MANAGEMENT TECHNIQUES:-
		There are Four Session Management Techniques:-
		HttpSession
		Cookies
		Url-Rewriting
		Hidden Fields
		
		
	We can use the folowinng to store the client conversional data:
		HttpSession
		Cookies
	
	We can use the following to carry SessionID:
		Cookies
		Url-Rewriting
		Hidden Fields

	
Note:-	Default mechanism to carry SessionID is through Cookies
	SessionID is coming with client to server along with Cookies


To Import Packages In JSP tag used:-<%page import="package name"%>



Difference Between HTML and JSP


HTML								JSP

~Html is given by w3c(World Wide Web Consortium)			JSP is given by Sun MicroSystem

~Html generated static Web Pages				JSP generates dynamic web pages

~It does not allow to place java code inside HTML pages		JSP allows to place java code inside JSP pages

~It is Client Side technology					It is Server Side technology

~Needs Html Interpreter to execute these codes			Needs JSP container to execute JSP code

~It does not allow to place custom tag or third party tag		It allows to place custom tag or third party tag



Static Web Page:	A static web page (sometimes called a flat page/stationary page) is a web page that is delivered to the user exactly as stored, in contrast to
	          	dynamic web pages which are generated by a web application.   	  			
		Consequently, a static web page displays the same information for all users, from all contexts, subject to modern capabilities of a web server to
		negotiate content-type or language of the document where such versions are available and the server is configured to do so.	

Dynamic Web Page:	A dynamic web page is a web page that displays different content each time it's viewed. For example, the page may change with the time of day,
 		the user that accesses the webpage, or the type of user interaction. There are two types of dynamic web pages.
		Server-side scripting
		Client-side scripting




Java Servlet Pages released in 1999 by Sun Microsystem
It may be viewed as high-level abstraction of java servlets 
JSP's are translated into servlets at runtime
Code are enclosed in <%...........................%> called scriptlets
Extension of jsp pages is "jsp"

HTML developed by Tim Berners-Lee in 1990
Hyper Text Markup Language is standard markup language 
Creating web pages and web applications with Cascading Style Sheet(CSS) and JavaScript Web Browser receives HTML documents from web server
HTML elements are building blocks of HTML pages Browsers donot display HTML tags but use them to interpret the content of web page
HTML provide interface between user and server and dtabase 
Web pages responsible to transfer the data from user to server and process it and then store data in database

 	
IN JSP for getting request we have predefined HttpSessionRequest as request i.e request.getAttribute()	we cannot write req.getAttribute or something like that

session.invalidate():-	You can call invalidate to discard an entire session. Just remember that doing so causes all of that user's session data to be lost, not just the
		session data that your servlet or JSP page created. So, all the servlets and JSP pages in a Web application have to agree on the cases for 
		which invalidate may be called


Exploring Http Session:
	HttpSession is an interface available in javax.servlet.http
	Subclass for HttpSession interface is implemented by Conntainer Vendor
	We can get HttpSession object with following mtds of HttpServletRequest:-
		1.HttpSession getsession():-Returns the current session associated with this request, or if the request does not have a session, creates one.	
		HttpSesssion sess=request.getSession();


		2.HttpSession getSession(boolean true):Returns the current HttpSession associated with this request or, if there is no current session and create is true, returns a new session.
		HttpSesssion sess=request.getSession(boolean true);

		1 and 2 are more or less same
		
		3.HttpSession getSession(boolean false):
		HttpSession session =request.getSession(false);
		above statement  will  returns the current session if session exists and if there's no valid session, a new session  will not be created,  it  will return null.
	
	
	We can store and access the Client specific data in HttpSession Object as an attribute with following methods:-
		void setAttribute(String atributeName,Object value)	:-To Store Attribute
		Object getAttribute(String atributeName)		:-To Provide Attribute Name
		void removeAttribute(String attributeName)
		Enumeration getAttributeName()		:-All Attribute Name Given By Enumeration 	
		
	These above four methods are used for request,session,context objects

	
	We can use the following methods to store user data:-
		void putValue(String ,Object)
		Object getValue(String )
		void removeValue(String)
		String[] getValueNames()

	Note:These 4 mtds are deprecated


	public String getId()				:-Returns the session ID for the client
	public long getCreationTime()			:-Returns the session	creation time in terms of milliseconds
	public long getLastAccessesTime()		:-Returns the time in milliseconds when the sesion accessed last time
	public int getMaxInactiveInterval()		:-Returns the time interval.If session is not used within that interval then session will be destroyed
	public ServletContext getServletContext()		:-Returns the ServletContext Object
	public void invalidate()			:-Destroys the sesssion immediately
	public boolean isNew()			:-Checks whether the session objects is newly created or existing object
	public void setMaxInactiveInterval(int sec)		:-Set the session inactive interval


Note:-	By default session is enabled in every JSP but we can disable session in JSP 


	We can Also Create SessionId in JSP and If We do so Than getSession() will be called 1st time in JSP and isNew is true but in Servlet getSession() will be 
	called 2nd time and isNew is false here only
	

	We can Even disable session in JSP and If We disable Session id in JSP than following:-
		<body>
		<br />Id:<%=session.getId() %>
		<br />Id isNew:<%=session.isNew() %>
		<body>
	
	Will Show ERROR
	
	i.e If I Disable Session in JSP than getSession() will not be called


	My Session will be destroyed if I shutdown my Server 

We can use the following method in web.xml file to destroy the session object automatically when session object is not usd by client for specified intervel:
		<session-config>
		<session-timeout>timeInMinute</session-timeout>
		
		</session-config>


If session time out is set in xml than it will override the default value(1800 i.e 30minute) Now if we set in ServletProgram than it will override the web.xml file
If session time out is set in xml and jsp than web.xml will be default max



	Servlet Scopes:-
		There are three scopes available in servlet:-
		~Request Scope	
		~Session Scope
		~Context or Application Scope


	We can store and manipulate the above scope Object as an attribute with following methods:-
	void setAttribute(String atributeName,Object value)	:-To Store Attribute
	Object getAttribute(String atributeName)		:-To Provide Attribute Name
	void removeAttribute(String attributeName)
	Enumeration getAttributeName()		:-All Attribute Name Given By Enumeration 	



		~Request Scope:-When data is stored in HttpServletRequest object than that scope will be upto request scope only.The data from request
			            scope can be accessed by that single user in that request only before sending the response to the client 	

		~Session Scope:-When data is stored in HttpSession object than the scope is upto session scope.The data from session scope can be 
			           accessed by single user across multiple request but within the same session 
		
		~Context or Application Scope:-When data is stored in ServletContext object then the scope will be context scope.The data from context or
				                 application scope can be accessed by multiple users acorss multiple requests


Exploring Coockis:-
		Cookies is a class available in javax.servlet.http 
		Cookies is the simple imformations with name and value
		Names and values of cookie will be of String Type 
		Normally Cookies is created at server machine and will be persisted or stored at client machine
		Cookies created at server machine will come to the client machine along with HttpResponse
		Cookies persisted at client machine will go to srever machine along with HttpRequest  
	

		Creating Cookies:-
				Cookies ck=new Cookies("email","sunny@gmail.com");	//here we are creating my Own Cookie
		
		Ading Cookies to Response:-
				response.addCookie(ck);

	Note:-	We must add Cookies to Response then only Cookies will go to the client machine



	Accessing Cookies from Response:-
		Cookies ck[]=request.getCookies();		:-To Collect cookies Since we can have multiplle cookies so store in SringArray 	
		for(Cookies c:ck){
		String cname=c.getName();
		String cvalue=c.getValue();
		SOP(cname+"\t\t"+cvalue);
		}


	Web Container Tasks:-
			By Default Container will do the following regarding session management:-
				Creates one Special Cookie with 
				~JSESSIONID as Cookie Name
				~sessionid as Cookie Value
				~Cookie ck=new Cookie("JSESSIONID",sess.getId());

			Adds that cookie to the response 
				response.addCookie(ck);			
					
			Collects the Special cookies and Identify the Session object based on Session Id collected from that Special Cookie


				Cookie ck[]=request.getCookies();
				for(Cookies c:ck){
				String cn=c.getName();
				if(cn.equals("JSESSIONID")){
				String sid=c.getValue();
				HttpSession hs=(HttpSession)sessionMap.get(sid);		//if session id is available in session map
				}
				}

		Now Assume that sessionMap is the Map object which contains key and value
			key is SESSIONID
			value is SessionObject
		
		We can use the following option to remove the Cookies stored in client machine:--
			We need to specify the max age of Cookie as 0
			We need to add the same cookies to the response
		
			Cookie c=................................
			c.setMaxAge(0);
			response.addCookie(c);
			
			setMaxAge(.......):-It Specify expiary time of cookie 
			Now if c.setMaxAge(0) than cookies will be destroyed and if c.setMaxAge(-ve) than cookie will not destroy until we uninstall the 
			browser	



				String bnm=request.getParameter("bname");	
				Cookie ck[]=request.getCookies();
				for(Cookies c:ck){
				String cn=c.getName();
				if(cn.equals("bnm")){
				String sid=c.getValue();
				HttpSession hs=(HttpSession)sessionMap.get(sid);		//if session id is available in session map
				}
				}


Note:-	Default life time of cookie is equals till the life of browser i.e till browser is not closed
			
		Cookies variables is local variable So Once getSession is Over i.e Session Invalidate than that cookies are ready for GC
		Session objects are saparately stored in session map so we can use session object after being used also but cookies not storing internally so 
		cookies not store in server



NOTE:-	in FormAction by default method is get but we can change to post 





URL Rewriting:-
		Container uses SessionID to identify Client as Old or New
		Container sends the Sesssion ID to Client machine as Cookie with name JSESSIONID
		Sometimes we may get problem with cookies when :-
			a.Browser is not supporting the cookies
			b.When Client Deletes the Cookies
		Now when any problem occur with the cookies than request will not carry Cookies with name JSESSIONID
		IF request is coming without JSESSIONID cookie than container will treat that client as New and provides the new Sessiom objects and New 
		Sessionid i.e Client is losing the prevoius Session object and conversional data available in that Session object 
		So as an alternative we may use URL's or hidden fields to carry Session Id from client to server and from server to client

		URL-Rewtiting is a process of attaching the sessionid to URL.It is also called Encoding of URL

		We can use the following method with the response object to Encode he URL:-
			Srting url=response.encodeURL(hello.jsp);
			url will be hello.jsp;jsessionid=A12jksjdh6Fsgsasdd	
		encodeURL() method takes the URL as parameter and encoded url as:-
			................................................................
		encodeURL is an Deprecated method

Note:-When We Close Server Than also Destroy Mtd Called


Hidden Fields:-
	We can store SessionID in hidden fields as:
		<input type="hidden" name="JSESSIONID" value="<%=session.getId()%>" />
		



Session Id can also be attached with URL 

Note:-	We can send Sesion ID either with Cookies or With URL or With Hidden Files

If Cookies has JSESSIONID than remaining two Will Be Ignorred

Every Form can be written with Hidden Files


NOTE:-	We can Identify whether client is Old or New by using SESSIONID
		We can use the following to carry Session ID
			~Cookies
			~URL
			~HiddenFiles


NOTE:-	We can store the client conversiona data in HttpSession   :-cookies[but Not Advisable because cookies will be persisted to client machine so no Security] 
		