**************************************************************************************************************************************
PL/SQL:
PL:Procedure language
PL/SQL is supported by oracle only and not by mysql
With PL/SQL we can define the block where multiple SQL statement can be submitted to database engine at once 

Syntax:
	Declare
	//Varaible or constants declaration

	BEGIN
	//Statements 
	End;
	/


To execute, enable serveroutput value 
>set serveroutput on;
SQL> / for executing last executing PL/SQL statement
SQL>ed	:---it will open a special notepad in SQL and here we can modify and copy our query

every time we close our Oracle(Sql) than every time serveroutput is off
we have to make serveroutput on and we can explicitly make serveroutput off

Put: same line
Put_line:next line 


Drop procedure procedurename		:-to drop procedure


SQL> conn
Enter user-name: system
Enter password:
Connected.
SQL> ed;
SP2-0107: Nothing to save.
 
for 1st time when we open sql ed command will not work






SQL> BEGIN
  2  dbms_output.put_line('Welcome to Oracle PL/SQL block');
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> set serveroutput on;
SQL> /
Welcome to Oracle PL/SQL block

PL/SQL procedure successfully completed.	



Variable decaration:

Syntax: var_name datatype;
eg:	eid int,name varchar(10).......etc  	 



Constants decaration:

Syntax: const_name CONSTANT datatype:=val;			//constant is like making final in java
eg: MAX1 CONSTANT int:=400;

MAX is a keyword


Variable initilization:

Syntax: var_name:= value or expression;
eg:eid:=101;	ename:='Sunny';	etc


Declaration and Intilization:
syntax: var_name datatype:=value or expresion
eg: id int:=101;
      name varchar(20):='Sunny';
	etc




&	:it is used to take the value from user at runtime 			(like scanner class in java)
||	:it is used for concatenation
/	:it is used to execute the last query

:=		valid
:   =		invalid




SQL> declare
  2  a int;
  3  b int;
  4  c int;
  5  Begin
  6  a:=15;
  7  b:=22;
  8  c:=a+b;
  9  dbms_output.put_line('Result is :'||c);
 10  end;
 11  /
Result is :37

PL/SQL procedure successfully completed.

SQL> /
Result is :37

PL/SQL procedure successfully completed.


SQL> declare
  2  a int;
  3  b int;
  4  c int;
  5  begin
  6  a:=10;
  7  b:=39;
  8  c:=(a+b)*(a-b);
  9  dbms_output.put_line('Result is '||c);
 10  end;
 11  /
Result is -1421

PL/SQL procedure successfully completed.




SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int:=&a;
  3  b int:=&b;
  4  c int;
  5  Begin
  6  c:=a+b;
  7  dbms_output.put_line('Result is :'||c);
  8* end;
SQL> /
Enter value for a: 34
old   2: a int:=&a;
new   2: a int:=34;
Enter value for b: 56
old   3: b int:=&b;
new   3: b int:=56;
Result is :90

PL/SQL procedure successfully completed.

************************************************************************************************************************************


Conditional statement:
synatx1:
	if(condition) than 
	s1;
	end if;


synatx2:
	if(condition) than 
	s1;
	else 
	s2;
	end if;


synatx1:
	if(condition) than 
	s1;
	elsif(condition) than 
	s2;
	elsif(condition) than 
	s3;
	......................
	.....................................
	......................................
	
	sN;
	end if;


Here s1,s2,...................................sN are the statements





SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  if(10<20) then
  3  dbms_output.put_line('Statement1');
  4  dbms_output.put_line('Hello Guys1');
  5  end if;
  6* end;
SQL> /
Statement1
Hello Guys1

PL/SQL procedure successfully completed.


SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  if(10<20) then
  3  dbms_output.put_line('Statement1');
  4  dbms_output.put_line('Hello Guys1');
  5  else
  6  dbms_output.put_line('Statement2');
  7  dbms_output.put_line('Hello Guys2');
  8  dbms_output.put_line('Hi Oracle');
  9  end if;
 10* end;
 11  /
Statement1
Hello Guys1

PL/SQL procedure successfully completed.




SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  if(false) then
  3  dbms_output.put_line('Statement1');
  4  dbms_output.put_line('Hello Guys1');
  5  else
  6  dbms_output.put_line('Statement2');
  7  dbms_output.put_line('Hello Guys2');
  8  dbms_output.put_line('Hi Oracle');
  9  end if;
 10* end;
SQL> /
Statement2
Hello Guys2
Hi Oracle


 Declare
 a int:=&a;
 b int:=&b;
 c int; 		
 Begin
 if(10*2+5>20) then
 c:=a+b;	
 dbms_output.put_line('Statement1 executed and value is ' || c);
 else
 c:=a-b;	
 dbms_output.put_line('Statement2 executed and value is ' || c);
 end if;
 end;



SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  if(false) then
  3  dbms_output.put_line('Statement1');
  4  dbms_output.put_line('Hello Guys1');
  5  elsif(20<30) then
  6  dbms_output.put_line('Statement2');
  7  dbms_output.put_line('Hello Guys2');
  8  else
  9  dbms_output.put_line('Statement3');
 10  dbms_output.put_line('Hello Guys3');
 11  end if;
 12* end;
SQL> /
Statement2
Hello Guys2

PL/SQL procedure successfully completed.



SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  if(false) then
  3  dbms_output.put_line('Statement1');
  4  dbms_output.put_line('Hello Guys1');
  5  elsif(20*4>9*30) then
  6  dbms_output.put_line('Statement2');
  7  dbms_output.put_line('Hello Guys2');
  8  else
  9  dbms_output.put_line('Statement3');
 10  dbms_output.put_line('Hello Guys3');
 11  end if;
 12* end;
SQL> /
Statement3
Hello Guys3

PL/SQL procedure successfully completed.


SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int :=&a;
  3  b int :=&b;
  4  Begin
  5  if(a>b) then
  6  dbms_output.put_line('Larger is:' || a);
  7  else
  8  dbms_output.put_line('Larger is:' || b);
  9  end if;
 10* end;
 11  /
Enter value for a: 34
old   2: a int :=&a;
new   2: a int :=34;
Enter value for b: 65
old   3: b int :=&b;
new   3: b int :=65;
Larger is:65

PL/SQL procedure successfully completed.





SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int :=&a;
  3  b int :=&b;
  4  max1 int;
  5  Begin
  6  if(a>b) then
  7  max1:=a;
  8  else
  9  max1:=b;
 10  end if;
 11  dbms_output.put_line('Larger is:' || max1);
 12* end;
SQL> /
Enter value for a: 34
old   2: a int :=&a;
new   2: a int :=34;
Enter value for b: 56
old   3: b int :=&b;
new   3: b int :=56;
Larger is:56

PL/SQL procedure successfully completed.

************************************************************************************************************************************
Looping Statements:
1.Simple loop
Syntax:
	<Initilzation>;

	Loop
	//Statements

	<Increemnt or decrement>;

	EXIT WHEN(condition);
	END LOOP;



					Forward Order:

SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int :=&a;
  3  Begin
  4  Loop
  5  dbms_output.put_line(a);
  6  a:=a+1;
  7  Exit When(a>50);
  8  End Loop;
  9* end;
SQL> /
Enter value for a: 30
old   2: a int :=&a;
new   2: a int :=30;
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50

PL/SQL procedure successfully completed.


SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int;
  3  Begin
  4  a:=2;
  5  Loop
  6  dbms_output.put_line(a);
  7  a:=a+1;
  8  Exit When(a>8);
  9  End Loop;
 10* end;
SQL> /
2
3
4
5
6
7
8

PL/SQL procedure successfully completed.


					Reverse Order
SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int :=&a;
  3  Begin
  4  Loop
  5  dbms_output.put_line(a);
  6  a:=a-1;
  7  Exit When(a<5);
  8  End Loop;
  9* end;
SQL> /
Enter value for a: 20
old   2: a int :=&a;
new   2: a int :=20;
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5

PL/SQL procedure successfully completed.



SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int;
  3  Begin
  4  a:=13;
  5  Loop
  6  dbms_output.put_line(a);
  7  a:=a-1;
  8  Exit When(a<5);
  9  End Loop;
 10* end;
SQL> /
13
12
11
10
9
8
7
6
5

PL/SQL procedure successfully completed.



2.For loop:
	for <variable> in start value..end value				---->Forward
	for <variable> in reverse start value..end value			----->Reverse

	Loop
	//statement 
	End Loop;




SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  for a in 5..25
  3  Loop
  4  dbms_output.putline(a);
  5  End Loop;
  6* End;
SQL> /
dbms_output.putline(a);
            *
ERROR at line 4:
ORA-06550: line 4, column 13:
PLS-00302: component 'PUTLINE' must be declared
ORA-06550: line 4, column 1:
PL/SQL: Statement ignored








SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  for a in 5..25
  3  Loop
  4  dbms_output.put_line(a);
  5  End Loop;
  6* End;
SQL> /
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25

PL/SQL procedure successfully completed.



SQL> ed;
Wrote file afiedt.buf

  1  Begin
  2  for a in reverse 5..25
  3  Loop
  4  dbms_output.put_line(a);
  5  End Loop;
  6* End;
SQL> /
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5

PL/SQL procedure successfully completed.






Sunny's for Multiplication of my desired number:
SQL> ed;
Wrote file afiedt.buf

  1  declare
  2     n int:=&n;
  3  begin
  4     for a in 1..10
  5     Loop
  6      dbms_output.put_line(n*a);
  7     end Loop;
  8*    end;
SQL> /
Enter value for n: 27
old   2:        n int:=&n;
new   2:        n int:=27;
27
54
81
108
135
162
189
216
243
270

PL/SQL procedure successfully completed.







SQL> select * from emp;

       EID ENAME               SALARY
---------- --------------- ----------
         1 Sunny                28000
         2 Rakesh               17000
         3 Ravi
         4 Pooja

SQL> ed;
Wrote file afiedt.buf

  1  begin
  2     for person in (select * from emp)
  3      Loop
  4      dbms_output.put_line(person.eid || person.ename || person.salary);
  5      end Loop;
  6* end;
SQL> /
1Sunny28000
2Rakesh17000
3Ravi
4Pooja

PL/SQL procedure successfully completed.




 begin
      for person in (select * from emp)
       Loop
       dbms_output.put_line(person.eid ||'  '|| person.ename|| ' ' ||person.salary);
       end Loop;
       end;
/




SQL> ed;
Wrote file afiedt.buf

  1  begin
  2     for person in (select * from emp)
  3      Loop
  4      dbms_output.put_line(person.eid || person.ename );
  5      end Loop;
  6* end;
SQL> /
1Sunny
2Rakesh
3Ravi
4Pooja

PL/SQL procedure successfully completed.





SQL> ed;
Wrote file afiedt.buf

  1  begin
  2     for person in reverse (select * from emp)
  3      Loop
  4      dbms_output.put_line(person.eid || person.ename );
  5      end Loop;
  6* end;
SQL> /
   for person in reverse (select * from emp)
                          *
ERROR at line 2:
ORA-06550: line 2, column 27:
PLS-00103: Encountered the symbol "SELECT" when expecting one of the following:
( - + case mod new not null others <an identifier>
<a double-quoted delimited-identifier> <a bind variable> avg
count current exists max min prior sql stddev sum variance
execute forall merge time timestamp interval date
<a string literal with character set specification>
<a number> <a single-quoted SQL string> pipe
<an alternatively-quoted string literal with character set specification>
<an alternativ
ORA-06550: line 3, column 5:
PLS-00103: Encountered the symbol "LOOP" when expecting one of the following:
; return returning and or
ORA-06550: line 5, column 5:
PLS-00103: Encountered the symbol "END" when expecting one of the following:
begin function package pragma procedure subtype type use
<an identifier> <a double-quoted delimited-identifier> form
current cursor

Reverse option is not valid in above problem i.e for accessing the elements of table





SQL> ed;
Wrote file afiedt.buf

  1  declare
  2     n int:=&n;
  3  begin
  4     for i in  1..n loop
  5     for j in 1..i loop
  6     dbms_output.put('*');
  7     end Loop;
  8     dbms_output.put_line(' ');
  9     end Loop;
 10*    end;
 11  /
Enter value for n: 6
old   2:        n int:=&n;
new   2:        n int:=6;
*
**
***
****
*****
******

PL/SQL procedure successfully completed.







SQL> ed;
Wrote file afiedt.buf

  1     declare
  2         n int:=&n;
  3      begin
  4         for i in  1..n loop
  5         for j in 1..i loop
  6         dbms_output.put('*');
  7         end Loop;
  8         dbms_output.put_line(' ');
  9         end Loop;
 10        for i in reverse 1..n loop
 11        for j in 1..i loop
 12        dbms_output.put('*');
 13       end Loop;
 14        dbms_output.put_line(' ');
 15       end Loop;
 16*      end;
SQL> /
Enter value for n: 5
old   2:        n int:=&n;
new   2:        n int:=5;
*
**
***
****
*****
*****
****
***
**
*

PL/SQL procedure successfully completed.

SQL> set serveroutput on;    and if serveroutput is off than it will not print anytthing on console

PL/SQL procedure successfully completed.

SQL> set serveroutput off;
SQL> /
Enter value for n: 5
old   2:        n int:=&n;
new   2:        n int:=5;

PL/SQL procedure successfully completed.



SQL> set serveroutput on;
SQL> /
Enter value for n: 8
old   2:        n int:=&n;
new   2:        n int:=8;
*
**
***
****
*****
******
*******
********
********
*******
******
*****
****
***
**
*

PL/SQL procedure successfully completed.


3.While loop:
syntax:
	initilizition
	while(condition)
	Loop
	//statement
	increment/decrement
	End Loop;



Forward order:
SQL> declare
  2  a int;
  3  begin
  4  a:=1;
  5  while(a<=10)
  6  Loop
  7  dbms_output.put_line(a);
  8  a:=a+1;
  9  end Loop;
 10  end;
 11  /

PL/SQL procedure successfully completed.

SQL> /

PL/SQL procedure successfully completed.

SQL> set serveroutput on;
SQL> /
1
2
3
4
5
6
7
8
9
10

PL/SQL procedure successfully completed.



SQL> ed;
Wrote file afiedt.buf

  1  declare
  2  a int:=&a;
  3  begin
  4  while(a<=30)
  5  Loop
  6  dbms_output.put_line(a);
  7  a:=a+1;
  8  end Loop;
  9* end;
 10  /
Enter value for a: 18
old   2: a int:=&a;
new   2: a int:=18;
18
19
20
21
22
23
24
25
26
27
28
29
30

PL/SQL procedure successfully completed.


Reverse order:

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a int:=&a;
  3  begin
  4  while(a>=10)
  5  Loop
  6  dbms_output.put_line(a);
  7  a:=a-1;
  8  end Loop;
  9* end;
 10  /
Enter value for a: 15
old   2: a int:=&a;
new   2: a int:=15;
15
14
13
12
11
10
PL/SQL procedure successfully completed.








SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a int :=&a;
  3  begin
  4  while(a>=30)
  5  Loop
  6  dbms_output.put_line(a);
  7  a:=a-1;
  8  end Loop;

  9* end;
 10  /
Enter value for a: 50
old   2: a int :=&a;
new   2: a int :=50;
50
49
48
47
46
45
44
43
42
41
40
39
38
37
36
35
34
33
32
31
30

PL/SQL procedure successfully completed.



declare 
first int:=&first;
last int:=&last;
begin
while(first<=last)
Loop
dbms_output.put_line(first);
first:=first+7;
end Loop;
end;
/



*************************************************************************************************************************************
Stored Procedure:
Stored Procedure is a named PL/SQL block 
It is created and stored in the database 
When we submit PL/SQL block to database engine then it will be compiled every time 
When we submit Stored Procedure to database engine then it will be compiled and saved into database 
When we want to execute Stored Procedure then we can call with its name it will be executed directly without re-compilimg

Stored Procedure is supported by Oracle
 
 

Syntax: 	Create or Replace Procedure Procedure_Name(parametername parametertype datatype)
	IS or AS 
	Declaration section:
	
	Begin
	SQL statement
	End;
	

SQL> create procedure showMsg as
  2  begin
  3   dbms_output.put_line('Welcome to Procedure');
  4  end;
  5  /

Procedure created.

SQL> call showMsg();
Welcome to Procedure

Call completed.







SQL> select ASCII('K') from dual;

ASCII('K')
----------
        75

SQL> select ASCII('j') from dual;

ASCII('J')
----------
       106

SQL> select ASCII('%') from dual;

ASCII('%')
----------
        37







SQL> create procedure proc1(a int ,b int ) as
  2  c int;
  3  begin
  4  c:=a+b;
  5   dbms_output.put_line('The sum of a and b is: ' || c);
  6  end;
  7  /

Procedure created.

SQL> call proc1(23,45);
The sum of a and b is: 68

Call completed.


SQL> create procedure myProc1(a int,b int,c int) as
  2  result int;
  3  begin
  4  result:=a+b+c;
  5  dbms_output.put_line('Result is '|| result);
  6  end;
  7  /

Procedure created.

SQL> call myProc1(2828,9290,3734);

Call completed.

SQL> call myProc1(2828,9290,3734);

Call completed.

SQL> set serveroutput on;
SQL> call myProc1(2828,9290,3734);
Result is 15852

Call completed.



create or replace will work for Oracle only i.e we can create a new procedure say proc1 or we can replece proc1 with p1

	Types of Parameter:					Syntax
	
	Input Parameter					id IN int;
	Output parameter 					sname OUT varchar;		//here no size is given for varchar
	Input Output Parameter				id IN OUT int;	





						Input parameter:
	It is by default type
	The value which we are passing cannot be changed inside the procedure and we cannot access the value outside the procedure
	To specify the parameter as input we have to use IN keyword

	




SQL> ed;
Wrote file afiedt.buf

  1  create or replace procedure p1(ch IN char)
  2  as
  3     n int;
  4  Begin
  5     n:=ascii(ch);
  6     dbms_output.put_line('Ascii value is: ' ||n);
  7*    end;
SQL> /

SQL> call p1('S');
Ascii value is: 83

Call completed.



SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc2(ch in char) as
  2  n int;
  3  begin
  4  n:=ASCII(ch);
  5  dbms_output.put_line('ASCII Value is '|| n);
  6* end;
  7  /

Procedure created.

SQL> call myProc2('D');
ASCII Value is 68

Call completed.



SQL> ed;
Wrote file afiedt.buf

  1  create or replace procedure p2(a IN int, b IN int) as
  2     c int;
  3     begin
  4     c:=a+b;
  5     dbms_output.put_line('Sun is ' || c);
  6*    end;
  7  /

Procedure created.

SQL> call p2(24,34);
Sun is 58

Call completed.
					
SQL> call p2(45,66);
Sun is 111

SQL> show errors;
No errors.

SQL> call p1('x');
Ascii value is: 120

Call completed.



SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc2(a in int,b in int) as
  2  c int;
  3  begin
  4  c:=a+b;
  5  dbms_output.put_line('Sum is '|| c);
  6* end;
  7  /

Procedure created.

SQL> call myProc2(28,10);

Call completed.

SQL> set serveroutput on;
SQL> call myProc2(28,10);
Sum is 38

Call completed.

SQL> call myProc2(33838,39393);
Sum is 73231

Call completed.


							Output parameter:


		It is used to bind the variable to the procedure at runtime
		The value of variable which we are passing can be changed inside the procedure and we can access the modified value outside the procedure 
		To specify output parameter we have have to use OUT keyword 




SQL> ed;
Wrote file afiedt.buf

  1  create or replace procedure p3(ch IN char,n OUT int) as
  2  Begin
  3  n:=ascii(ch);
  4* end;
SQL> /

Procedure created.

SQL> vari n number;
SQL> call p3('D',:n);

Call completed.

SQL> print n;

         N
----------
        68


Here we print the output (:variable)
We are not getting asci value of 'D'  i.e the value of varianble we are passing as 'D' is changed to n


SQL> vari Y number;
SQL> call p3('M',:Y);

Call completed.

SQL> print Y;

         Y
----------
        77





SQL> vari B  number;
SQL> call p3('s',:B);

Call completed.

SQL> print B;

         B
----------
       115

SQL> var g  number;
SQL> call p3('j',:g);

Call completed.

SQL> print B;

         B
----------
       115

SQL> print g;

         G
----------
       106

SQL> variable h number;
S
SQL> call p3('j',:h);

Call completed.

SQL> print h;

         H
----------
       106


SQL> myvar B  number;
SP2-0734: unknown command beginning "myvar B  n..." - rest of line ignored.

We can use either var,vari,variable,varia,variab,variabl to create variable


SQL> vari k number;
SQL> myvari k number;
SP2-0734: unknown command beginning "myvari k n..." - rest of line ignored.
SQL> variab k number;
SQL> v k number;
SP2-0042: unknown command "v k number" - rest of line ignored.
SQL> varhhj k number;
SP2-0734: unknown command beginning "varhhj k n..." - rest of line ignored.
SQL> va k number;
SP2-0734: unknown command beginning "va k numbe..." - rest of line ignored.
SQL> vari k number;
SQL> varia k number;
SQL> variab k number;





SQL> create or replace procedure myProc3(ch in char,num out int) as
  2  begin
  3  num:=ASCII(ch);
  4  end;
  5  /

Procedure created.

SQL> vari num number;
SQL> call myProc3('K',:num);

Call completed.

SQL> print num;

       NUM
----------
        75




SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc3(a in int,b in int,c out int) as
  2  begin
  3  c:=a*b+a*a+b*a+b*b;
  4  dbms_output.put_line('Result is '|| c);
  5* end;
  6  /

Procedure created.

SQL> vari c number;
SQL> call myProc3(2,3,:c);
Result is 25

Call completed.


SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc3(ch in char,num out int) as
  2  begin
  3  num:=ASCII(ch);
  4  dbms_output.put_line(num);
  5* end;
SQL> /

Procedure created.

SQL> vari num;
variable   num
datatype   NUMBER
SQL> vari num number;
SQL> call myProc3('s',:num);
115

Call completed.

We can Either Print num like print num or we can do in Stored Procedure only like  dbms_output.put_line(num);


SQL> ed;
Wrote file afiedt.buf

  1  create or replace procedure p4(a in int ,b in int,c out int ) as
  2         c:=a+b;
  3*   * end;
  4  /

Warning: Procedure created with compilation errors.

SQL> show errors;
Errors for PROCEDURE P4:

LINE/COL ERROR
-------- -----------------------------------------------------------------
2/9      PLS-00103: Encountered the symbol "=" when expecting one of the
         following:
         constant exception <an identifier>
         <a double-quoted delimited-identifier> table LONG_ double ref
         char time timestamp interval date binary national character
         nchar

SQL> drop procedure p4;

Procedure dropped.

SQL> ed;
Wrote file afiedt.buf

  1  create or replace procedure p4(a in int,b in int, c out int ) as
  2     begin
  3     c:=a+b;
  4*    end;
SQL> /

Procedure created.

SQL> var myoutput number;
SQL> call p4(23,45,:myoutput);

Call completed.

SQL> print myoutput;

  MYOUTPUT
----------
        68



SQL> var myout number;
SQL> call p4(3948,333,:myout);

Call completed.

SQL> print myout;

     MYOUT
----------
      4281

SQL> var myout number;
SQL> call p4(2234,333,:myout);

Call completed.

SQL> print myout;

     MYOUT
----------
      2567


SQL> varia outc number;
SQL> call p4(2345,345,:outc);

Call completed.

SQL> print outc;

      OUTC
----------
      2690


SQL> va outc number;
SP2-0734: unknown command beginning "va outc nu..." - rest of line ignored.
SQL> myvar outc number;
SP2-0734: unknown command beginning "myvar outc..." - rest of line ignored.
SQL> variabl outc number;
SQL> variab outc number;
SQL> varia outc number;
SQL> var outc number;
SQL> va outc number;
SP2-0734: unknown command beginning "va outc nu..." - rest of line ignored.







						Input-Output
		It is used to bind the variable with some initilized value to procedure at runtime
		The value of variable which we are passing can be changed inside the procedure and we can access the modified value outside the procedure 
		To specify output parameter we have have to use IN OUT keyword 








SQL> create or replace procedure p5(a in int,b in out int )
  2  as
  3  begin
  4  b:=a+b;
  5  end;
  6  /

Procedure created.

SQL> set serveroutput on;
SQL> vari myoutpuut number;

SQL> exec:myoutpuut:=10;

PL/SQL procedure successfully completed.

SQL> call p5(25,:myoutpuut);

Call completed.

SQL> print myoutpuut;

 MYOUTPUUT
----------
        35


SQL> variable out2 number;
SQL> exec:out2:=13;					

PL/SQL procedure successfully completed.

SQL> call p5(98,:out2);				

Call completed.





SQL> print out2;

      OUT2
----------
       111



SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc3(myin in int,myout in out int) as
  2  begin
  3  myout:=myin+myout;
  4  dbms_output.put_line('Output is '|| myout);
  5* end;
SQL> /

Procedure created.

SQL> vari myout number;
SQL> exec:myout:=20;

PL/SQL procedure successfully completed.

SQL> call myProc3(25,:myout);
Output is 45

Call completed.

SQL> print myout;

     MYOUT
----------
        45




SQL> ed
Wrote file afiedt.buf

  1  create or replace procedure myProc3(a in int,b in out int) as
  2  begin
  3  b:=a*a+a*b+b*a+b*b;
  4  dbms_output.put_line('Output is '|| b);
  5* end;
SQL> /

Procedure created.

SQL> vari b number;
SQL> exec:b:=40;

PL/SQL procedure successfully completed.

SQL> call myProc3(50,:b);
Output is 8100

Call completed.

SQL> print b;

         B
----------
      8100

*************************************************************************************************************************************


SQL> create table empproc (sid int primary key,name varchar(15),fee float);

Table created.

SQL> create sequence empproseq;

Sequence created.



SQL> create or replace procedure empinsert(pname varchar,pfee float) as
  2  begin
  3  insert into empproc values(empproseq.nextval,pname,pfee);
  4  end;
  5  /

Procedure created.


SQL> call empinsert('Sunny',29000);

Call completed.

SQL> call empinsert('Raju',23000);

Call completed.

SQL> call empinsert('Manu',17000);

Call completed.



Here we donot need to insert every record every time.Here we created a procedure empinsert to isnert data to empproc and we just have to call procedure 
empinsert to insert data to enpproc 

SQL> select * from empproc;

       SID NAME                   FEE
---------- --------------- ----------
         1 	Sunny                29000
         2 	Raju                  23000
         3 	Manu                17000

SQL> call empinsert('Manish',20000);

Call completed.

SQL> call empinsert('Ashish',18000);

Call completed.

SQL> select * from empproc;

       SID NAME                   FEE
---------- --------------- ----------
         1 Sunny                29000
         2 Raju                 23000
         3 Manu                 17000
         4 Manish               20000
         5 Ashish               18000



SQL> create or replace procedure empdelete(id int) as
  2  begin
  3  delete from empproc where sid=id;
  4  end;
  5  /

Procedure created.

SQL> call empdelete(4);

Call completed.

SQL> select * from empproc;

       SID NAME                   FEE
---------- --------------- ----------
         1 Sunny                29000
         2 Raju                 23000
         3 Manu                 17000
         5 Ashish               18000


SQL> call empdelete(2);

Call completed.

Here also we use create procedure empdelete to delete records from empproc and we are just calling that procedure to delete record from empproc
SQL> select * from empproc;

       SID NAME                   FEE
---------- --------------- ----------
         1 Sunny                29000
         3 Manu                 17000
         5 Ashish               18000


SQL> call empinsert('Pooja',22000);

Call completed.

SQL> select * from empproc;

       SID NAME                   FEE
---------- --------------- ----------
         1 Sunny                29000
         3 Manu                 17000
         5 Ashish               18000
         6 Pooja                22000














************************************************************************************************************************************



SQL> create table stu8(id int primary key,name varchar(20),fee float);

Table created.

SQL> create sequence stu8seq start with 101 increment by 1;

Sequence created.

SQL> create or replace procedure stu8proc(pname varchar,pfee float) as
  2  begin
  3  insert into stu8 values(stu8seq.nextval,pname,pfee);
  4  end;
  5  /

Procedure created.

SQL> call stu8proc('Mohan',58000);

Call completed.

SQL> call stu8proc('Pavan',34000);

Call completed.

SQL> call stu8proc('Rani',26000);

Call completed.

SQL> call stu8proc('Manu',41000);

Call completed.

SQL> select * from stu8;

        ID NAME                        FEE
---------- -------------------- ----------
       101 Mohan                     58000
       102 Pavan                     34000
       103 Rani                      26000
       104 Manu                      41000

SQL> create or replace procedure stu8update(id int,pname out varchar,pfee in out float) as
  2  begin
  3  update stu8 set fee=fee+pfee where sid
  4  end;
  5  /

Warning: Procedure created with compilation errors.

SQL> drop procedure stu8update;

Procedure dropped.

SQL> create or replace procedure stu8update(pid int,pname out varchar,pfee in out float) as
  2  begin
  3  update stu8 set fee=fee+pfee where id=pid;
  4  select name,fee into pname,pfee from stu8 where id=pid;
  5  end;
  6  /

Procedure created.


SQL> var nm varchar2(15);
SQL> var fe number;

SQL> exec:fe:=12000;

PL/SQL procedure successfully completed.




SQL> call stu8update(102,:nm,:fe);

Call completed.

SQL> select * from stu8;

        ID NAME                        FEE
---------- -------------------- ----------
       101 Mohan                     58000
       102 Pavan                     46000				//here with id=102 fee is added with 12000(34000+12000)
       103 Rani                      26000
       104 Manu                      41000


**************************************************************************************************************************************




